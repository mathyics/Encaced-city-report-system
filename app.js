import { collection, addDoc, getDocs, getDoc, doc, deleteDoc, updateDoc } from 'https://www.gstatic.com/firebasejs/10.14.1/firebase-firestore.js';

let map;
        let issues = [];
        const mapCenter = [40.7128, -74.0060];
        let isAdmin = false;
        let userVerifications = {};
        let markers = {};

        function initMap() {
            map = L.map('map').setView(mapCenter, 12);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                
            }).addTo(map);

            map.on('click', function(e) {
                document.getElementById('location').value = `${e.latlng.lat.toFixed(4)}, ${e.latlng.lng.toFixed(4)}`;
                showToast('Location selected on map', 'success');
            });
        }
        

        const db = window.db;


        function addIssueToMap(issue) {
            const marker = L.marker(issue.location).addTo(map)
                .bindPopup(`<strong>${issue.type}</strong><br>${issue.description}`);
            markers[issue.id] = marker;
        }

        function removeIssueFromMap(issueId) {
            if (markers[issueId]) {
                map.removeLayer(markers[issueId]);
                delete markers[issueId];
            }
        }

        function updateRecentReports() {
            const recentReportsList = document.getElementById('recent-reports-list');
            recentReportsList.innerHTML = '';
            issues.slice(-5).reverse().forEach(issue => {
                const reportItem = document.createElement('div');
                reportItem.className = 'report-item';
                reportItem.innerHTML = `
                    <h3>${issue.type}</h3>
                    <p>${issue.description}</p>
                    <p>Location: ${issue.location[0].toFixed(4)}, ${issue.location[1].toFixed(4)}</p>
                    <p>Status: ${issue.isFake ? 'Fake' : 'True'}</p>
                    ${issue.image ? `<img src="${issue.image}" alt="Report image" class="report-image">` : ''}
                    <div class="verification-count">Verifications: ${issue.trueCount || 0} True, ${issue.falseCount || 0} False</div>
                    ${issue.autoGenerated ? '<p class="auto-generated">Auto-generated</p>' : ''}
                `;
                if (isAdmin) {
                    const deleteBtn = document.createElement('button');
                    deleteBtn.textContent = 'Delete';
                    deleteBtn.className = 'delete-btn';
                    deleteBtn.onclick = () => deleteIssue(issue.id);
                    reportItem.appendChild(deleteBtn);

                    const flagBtn = document.createElement('button');
                    flagBtn.textContent = issue.isFake ? 'Mark as True' : 'Flag as Fake';
                    flagBtn.className = 'flag-btn';
                    flagBtn.onclick = () => flagIssue(issue.id);
                    reportItem.appendChild(flagBtn);
                } else if (!issue.autoGenerated) {
                    const verifyTrueBtn = document.createElement('button');
                    verifyTrueBtn.textContent = 'Verify True';
                    verifyTrueBtn.className = 'verify-btn';
                    verifyTrueBtn.onclick = () => verifyIssue(issue.id, true);
                    verifyTrueBtn.disabled = userVerifications[issue.id] !== undefined;
                    reportItem.appendChild(verifyTrueBtn);

                    const verifyFalseBtn = document.createElement('button');
                    verifyFalseBtn.textContent = 'Verify False';
                    verifyFalseBtn.className = 'verify-btn';
                    verifyFalseBtn.onclick = () => verifyIssue(issue.id, false);
                    verifyFalseBtn.disabled = userVerifications[issue.id] !== undefined;
                    reportItem.appendChild(verifyFalseBtn);
                }
                recentReportsList.appendChild(reportItem);
            });
        }

        function showToast(message, type = 'default') {
            const toast = document.getElementById('toast');
            toast.textContent = message;
            toast.className = `toast show ${type}`;
            setTimeout(() => {
                toast.className = 'toast';
            }, 3000);
        }

      
        async function saveToFirestore() {
            try {
                
                const batch = db.batch(); 
                issues.forEach(issue => {
                    const issueRef = doc(db, 'issues', issue.id.toString());
                    batch.set(issueRef, issue);
                });
                
                
                const userVerificationsRef = doc(db, 'userVerifications', 'data');
                batch.set(userVerificationsRef, { verifications: userVerifications });
                
                await batch.commit();
                showToast('Data saved to Firestore', 'success');
            } catch (error) {
                showToast('Error saving data: ' + error, 'error');
            }
        }
        

            async function loadFromFirestore() {
            try {
                
                const querySnapshot = await getDocs(collection(db, 'issues'));
                issues = querySnapshot.docs.map(doc => {
                    const issueData = doc.data();
                    issueData.id = doc.id;
                    return issueData;
                });
                issues.forEach(addIssueToMap);
        
                
                const verificationsDoc = await getDoc(doc(db, 'userVerifications', 'data'));
                if (verificationsDoc.exists()) {
                    userVerifications = verificationsDoc.data().verifications || {};
                }
        
                updateRecentReports();
                showToast('Data Successfully loaded', 'success');
            } catch (error) {
                showToast('Error loading data: ' + error, 'error');
            }
        }
        

       
        function deleteIssue(id) {
            issues = issues.filter(issue => issue.id !== id);
            removeIssueFromMap(id);
            saveToFirestore(); 
            updateRecentReports();
            showToast('Issue deleted successfully', 'success');
        }
        
        function flagIssue(id) {
            const issue = issues.find(issue => issue.id === id);
            if (issue) {
                issue.isFake = !issue.isFake;
                saveToFirestore(); 
                updateRecentReports();
                showToast(`Issue marked as ${issue.isFake ? 'fake' : 'true'}`, 'success');
            }
        }
        
        function verifyIssue(id, isTrue) {
            if (userVerifications[id] === undefined) {
                const issue = issues.find(issue => issue.id === id);
                if (issue) {
                    if (isTrue) {
                        issue.trueCount = (issue.trueCount || 0) + 1;
                    } else {
                        issue.falseCount = (issue.falseCount || 0) + 1;
                    }
                    userVerifications[id] = isTrue;
                    saveToFirestore(); 
                    updateRecentReports();
                    showToast('Thank you for verifying this issue', 'success');
                }
            } else {
                showToast('You have already verified this issue', 'error');
            }
        }
        

        document.getElementById('issue-form').addEventListener('submit', function(e) {
            e.preventDefault();
            const type = document.getElementById('issue-type').value;
            const location = document.getElementById('location').value.split(',').map(Number);
            const description = document.getElementById('description').value;
            const imageFile = document.getElementById('image').files[0];

            if (isNaN(location[0]) || isNaN(location[1])) {
                showToast('Please enter valid coordinates or select a location on the map', 'error');
                return;
            }

            const newIssue = {
                id: Date.now(),
                type,
                location,
                description,
                isFake: false,
                trueCount: 0,
                falseCount: 0,
                autoGenerated: false
            };

            if (imageFile) {
                const reader = new FileReader();
                reader.onload = function(event) {
                    newIssue.image = event.target.result;
                    finalizeIssueSubmission(newIssue);
                };
                reader.readAsDataURL(imageFile);
            } else {
                finalizeIssueSubmission(newIssue);
            }
        });

        
        async function finalizeIssueSubmission(newIssue) {
            try {
                const docRef = await addDoc(collection(db, "issues"), newIssue);
                newIssue.id = docRef.id; 
                issues.push(newIssue);
                addIssueToMap(newIssue);
                updateRecentReports();
                saveToFirestore(); 
                showToast('Issue reported successfully!', 'success');
                document.getElementById('issue-form').reset();
            } catch (error) {
                showToast('Error reporting issue: ' + error, 'error');
            }
        }

        document.getElementById('auto-location').addEventListener('click', function() {
            if ('geolocation' in navigator) {
                navigator.geolocation.getCurrentPosition(
                    
                    function(position) {
                        const { latitude, longitude } = position.coords;
                        document.getElementById('location').value = `${latitude.toFixed(4)}, ${longitude.toFixed(4)}`;
                        map.setView([latitude, longitude], 13);
                        showToast('Location auto-selected', 'success');
                    },
                    function() {
                        showToast('Unable to get your location', 'error');
                    }
                );
            } else {
                showToast('Geolocation is not supported by your browser', 'error');
            }
        });

        document.getElementById('login-btn').addEventListener('click', function() {
            document.getElementById('login-form').style.display = 'block';
        });

        document.getElementById('admin-login-form').addEventListener('submit', function(e) {
            e.preventDefault();
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;
            if (username === 'admin' && password === 'password') {
                isAdmin = true;
                document.getElementById('login-form').style.display = 'none';
                document.getElementById('login-btn').style.display = 'none';
                document.getElementById('logout-btn').style.display = 'inline-block';
                updateRecentReports();
                showToast('Admin logged in successfully', 'success');
            } else {
                showToast('Invalid credentials', 'error');
            }
        });

        document.getElementById('logout-btn').addEventListener('click', function() {
            isAdmin = false;
            document.getElementById('login-btn').style.display = 'inline-block';
            document.getElementById('logout-btn').style.display = 'none';
            updateRecentReports();
            showToast('Admin logged out successfully', 'success');
        });

        function generateRandomIssue() {
            const randomIssue = {
                id: Date.now(),
                type: ['Pothole', 'Streetlight', 'Graffiti', 'Trash'][Math.floor(Math.random() * 4)],
                location: [
                    mapCenter[0] + (Math.random() - 0.5) * 0.1,
                    mapCenter[1] + (Math.random() - 0.5) * 0.1
                ],
                description: 'Automatically generated issue',
                isFake: false,
                trueCount: 0,
                falseCount: 0,
                autoGenerated: true,
                createdAt: Date.now()
            };
            issues.push(randomIssue);
            addIssueToMap(randomIssue);
            updateRecentReports();
            saveToFirestore();

            
            setTimeout(() => {
                deleteIssue(randomIssue.id);
            }, 30 * 60 * 1000);
        }

        // Generate a random issue every 5 minutes
        setInterval(generateRandomIssue, 5 * 60 * 1000);

        
        setInterval(() => {
            const now = Date.now();
            issues = issues.filter(issue => {
                if (issue.autoGenerated && now - issue.createdAt > 30 * 60 * 1000) {
                    removeIssueFromMap(issue.id);
                    return false;
                }
                return true;
            });
            updateRecentReports();
            saveToFirestore()
        }, 60 * 1000);

        initMap();
        loadFromFirestore();
